const DIR_UP = 0
const DIR_RIGHT = 1
const DIR_DOWN = 2
const DIR_LEFT = 3
const DIR_IN = 4
const DIR_OUT = 5
const NUM_DIRS = 6

function make_tile(c,r,d){
	//console.log(raw_map)
	//console.log("check "+d+" , "+r+" , "+c)
	//console.log(raw_map[d][r][c])
	let is_open =  raw_map[d][r][c] == 1 //raw map has R and C reversed
	if(r>=15)	is_open = false // KILL ME
	let tile = {
		open: is_open,	 
		c: c,
		r: r,
		d: d,
		x: c*tile_size+tile_size*0.5,
		y: r*tile_size+tile_size*0.5,
		z: d*tile_size+tile_size*0.5,
		has_pellet : is_open
	}

	return tile
}


function get_tile_in_dir(tile, dir){
	let vec = dir_vec(dir)
	let new_c = tile.c+vec.x;
	let new_r = tile.r+vec.y;
	let new_d = tile.d+vec.z;
	if (new_c < 0 || new_c >= num_cols || new_r < 0 || new_r >= num_rows || new_d < 0 || new_d >= num_depth){
		return null
	}
	return grid[new_c][new_r][new_d]
}

function dir_vec(dir){
	if (dir == DIR_UP)			return {x:0,  y:-1, z:0}
	if (dir == DIR_RIGHT)		return {x:1,  y:0,  z:0}
	if (dir == DIR_DOWN)		return {x:0,  y:1,  z:0}
	if (dir == DIR_LEFT)		return {x:-1, y:0,  z:0}
	if (dir == DIR_IN)			return {x:0, y:0,   z:1}
	if (dir == DIR_OUT)			return {x:0, y:0,   z:-1}
	console.log("you messed up")
}

function opposite_dir(dir){

	if (dir <= DIR_LEFT){
		return (dir + 2) % 4;
	}

	if (dir == DIR_IN)	return DIR_OUT
	if (dir == DIR_OUT)	return DIR_IN

	console.log("BAD DIR. cannot get opposite")
	return null
}

function get_tile_pos(a,b,c){
	if (b==null)	return get_tile_pos_tile(a)
	else			return get_tile_pos_coords(a,b,c)
}

function get_tile_pos_coords(c,r,d){
	return {
		x : c * tile_size + tile_size/2,
		y : r * tile_size + tile_size/2,
		z : d * tile_size + tile_size/2
	}
}

function get_tile_pos_tile(tile){
	return {
		x : tile.c * tile_size + tile_size/2,
		y : tile.r * tile_size + tile_size/2,
		z : tile.d * tile_size + tile_size/2
	}
}




function make_raw_level(){
	let parts = get_raw_levelParts()
	let raw_map = []
	raw_map.push(parts[0])
	raw_map.push(parts[1])
	raw_map.push(parts[1])
	raw_map.push(parts[1])
	raw_map.push(parts[0])
	raw_map.push(parts[1])
	raw_map.push(parts[1])
	raw_map.push(parts[1])
	raw_map.push(parts[0])

	return raw_map
}

function get_raw_levelParts(){
	let raw =  
	[
		[
			[0, 0, 0, 0, 0,  0, 0, 0, 0, 0,  0, 0, 0, 0, 0,  0, 0, 0, 0, 0,  0, 0, 0, 0, 0,  0, 0, 0],
			[0, 1, 1, 1, 1,  1, 1, 1, 1, 1,  1, 1, 1, 0, 0,  1, 1, 1, 1, 1,  1, 1, 1, 1, 1,  1, 1, 0],
			[0, 1, 0, 0, 0,  0, 1, 0, 0, 0,  0, 0, 1, 0, 0,  1, 0, 0, 0, 0,  0, 1, 0, 0, 0,  0, 1, 0],
			[0, 1, 0, 0, 0,  0, 1, 0, 0, 0,  0, 0, 1, 0, 0,  1, 0, 0, 0, 0,  0, 1, 0, 0, 0,  0, 1, 0],
			[0, 1, 0, 0, 0,  0, 1, 0, 0, 0,  0, 0, 1, 0, 0,  1, 0, 0, 0, 0,  0, 1, 0, 0, 0,  0, 1, 0],

			[0, 1, 1, 1, 1,  1, 1, 1, 1, 1,  1, 1, 1, 1, 1,  1, 1, 1, 1, 1,  1, 1, 1, 1, 1,  1, 1, 0],
			[0, 1, 0, 0, 0,  0, 1, 0, 0, 1,  0, 0, 0, 0, 0,  0, 0, 0, 1, 0,  0, 1, 0, 0, 0,  0, 1, 0],
			[0, 1, 0, 0, 0,  0, 1, 0, 0, 1,  0, 0, 0, 0, 0,  0, 0, 0, 1, 0,  0, 1, 0, 0, 0,  0, 1, 0],
			[0, 1, 1, 1, 1,  1, 1, 0, 0, 1,  1, 1, 1, 0, 0,  1, 1, 1, 1, 0,  0, 1, 1, 1, 1,  1, 1, 0],
			[0, 0, 0, 0, 0,  0, 1, 0, 0, 0,  0, 0, 1, 0, 0,  1, 0, 0, 0, 0,  0, 1, 0, 0, 0,  0, 0, 0],

			[0, 0, 0, 0, 0,  0, 1, 0, 0, 0,  0, 0, 1, 0, 0,  1, 0, 0, 0, 0,  0, 1, 0, 0, 0,  0, 0, 0],
			[0, 0, 0, 0, 0,  0, 1, 0, 0, 1,  1, 1, 1, 1, 1,  1, 1, 1, 1, 0,  0, 1, 0, 0, 0,  0, 0, 0],
			[0, 0, 0, 0, 0,  0, 1, 0, 0, 1,  0, 0, 0, 0, 0,  0, 0, 0, 1, 0,  0, 1, 0, 0, 0,  0, 0, 0],
			[0, 0, 0, 0, 0,  0, 1, 0, 0, 1,  0, 0, 0, 0, 0,  0, 0, 0, 1, 0,  0, 1, 0, 0, 0,  0, 0, 0],
			[0, 0, 0, 0, 0,  0, 1, 1, 1, 1,  0, 0, 0, 0, 0,  0, 0, 0, 1, 1,  1, 1, 0, 0, 0,  0, 0, 0],

			[0, 0, 0, 0, 0,  0, 0, 0, 0, 0,  0, 0, 0, 0, 0,  0, 0, 0, 0, 0,  0, 0, 0, 0, 0,  0, 0, 0],
			//[0, 0, 0, 0, 0,  0, 1, 0, 0, 1,  0, 0, 0, 0, 0,  0, 0, 0, 1, 0,  0, 1, 0, 0, 0,  0, 0, 0],
			[0, 0, 0, 0, 0,  0, 1, 0, 0, 1,  0, 0, 0, 0, 0,  0, 0, 0, 1, 0,  0, 1, 0, 0, 0,  0, 0, 0],
			[0, 0, 0, 0, 0,  0, 1, 0, 0, 1,  1, 1, 1, 1, 1,  1, 1, 1, 1, 0,  0, 1, 0, 0, 0,  0, 0, 0],
			[0, 0, 0, 0, 0,  0, 1, 0, 0, 1,  0, 0, 0, 0, 0,  0, 0, 0, 1, 0,  0, 1, 0, 0, 0,  0, 0, 0],
			[0, 0, 0, 0, 0,  0, 1, 0, 0, 1,  0, 0, 0, 0, 0,  0, 0, 0, 1, 0,  0, 1, 0, 0, 0,  0, 0, 0],

			[0, 1, 1, 1, 1,  1, 1, 1, 1, 1,  1, 1, 1, 0, 0,  1, 1, 1, 1, 1,  1, 1, 1, 1, 1,  1, 1, 0],
			[0, 1, 0, 0, 0,  0, 1, 0, 0, 0,  0, 0, 1, 0, 0,  1, 0, 0, 0, 0,  0, 1, 0, 0, 0,  0, 1, 0],
			[0, 1, 0, 0, 0,  0, 1, 0, 0, 0,  0, 0, 1, 0, 0,  1, 0, 0, 0, 0,  0, 1, 0, 0, 0,  0, 1, 0],
			[0, 1, 1, 1, 0,  0, 1, 1, 1, 1,  1, 1, 1, 1, 1,  1, 1, 1, 1, 1,  1, 1, 0, 0, 1,  1, 1, 0],
			[0, 0, 0, 1, 0,  0, 1, 0, 0, 1,  0, 0, 0, 0, 0,  0, 0, 0, 1, 0,  0, 1, 0, 0, 1,  0, 0, 0],

			[0, 0, 0, 1, 0,  0, 1, 0, 0, 1,  0, 0, 0, 0, 0,  0, 0, 0, 1, 0,  0, 1, 0, 0, 1,  0, 0, 0],
			[0, 1, 1, 1, 1,  1, 1, 0, 0, 1,  1, 1, 1, 0, 0,  1, 1, 1, 1, 0,  0, 1, 1, 1, 1,  1, 1, 0],
			[0, 1, 0, 0, 0,  0, 0, 0, 0, 0,  0, 0, 1, 0, 0,  1, 0, 0, 0, 0,  0, 0, 0, 0, 0,  0, 1, 0],
			[0, 1, 0, 0, 0,  0, 0, 0, 0, 0,  0, 0, 1, 0, 0,  1, 0, 0, 0, 0,  0, 0, 0, 0, 0,  0, 1, 0],
			[0, 1, 1, 1, 1,  1, 1, 1, 1, 1,  1, 1, 1, 1, 1,  1, 1, 1, 1, 1,  1, 1, 1, 1, 1,  1, 1, 0],

			[0, 0, 0, 0, 0,  0, 0, 0, 0, 0,  0, 0, 0, 0, 0,  0, 0, 0, 0, 0,  0, 0, 0, 0, 0,  0, 0, 0],	
		],

		[
			[0, 0, 0, 0, 0,  0, 0, 0, 0, 0,  0, 0, 0, 0, 0,  0, 0, 0, 0, 0,  0, 0, 0, 0, 0,  0, 0, 0],
			[0, 1, 0, 0, 0,  0, 1, 0, 0, 0,  0, 0, 1, 0, 0,  1, 0, 0, 0, 0,  0, 1, 0, 0, 0,  0, 1, 0],
			[0, 0, 0, 0, 0,  0, 0, 0, 0, 0,  0, 0, 0, 0, 0,  0, 0, 0, 0, 0,  0, 0, 0, 0, 0,  0, 0, 0],
			[0, 0, 0, 0, 0,  0, 0, 0, 0, 0,  0, 0, 0, 0, 0,  0, 0, 0, 0, 0,  0, 0, 0, 0, 0,  0, 0, 0],
			[0, 0, 0, 0, 0,  0, 0, 0, 0, 0,  0, 0, 0, 0, 0,  0, 0, 0, 0, 0,  0, 0, 0, 0, 0,  0, 0, 0],

			[0, 0, 0, 0, 0,  0, 1, 0, 0, 0,  0, 0, 0, 0, 0,  0, 0, 0, 1, 0,  0, 1, 0, 0, 0,  0, 0, 0],
			[0, 0, 0, 0, 0,  0, 0, 0, 0, 0,  0, 0, 0, 0, 0,  0, 0, 0, 0, 0,  0, 0, 0, 0, 0,  0, 0, 0],
			[0, 0, 0, 0, 0,  0, 0, 0, 0, 0,  0, 0, 0, 0, 0,  0, 0, 0, 0, 0,  0, 0, 0, 0, 0,  0, 0, 0],
			[0, 1, 0, 0, 0,  0, 1, 0, 0, 0,  0, 0, 0, 0, 0,  0, 0, 0, 0, 0,  0, 1, 0, 0, 0,  0, 1, 0],
			[0, 0, 0, 0, 0,  0, 0, 0, 0, 0,  0, 0, 0, 0, 0,  0, 0, 0, 0, 0,  0, 0, 0, 0, 0,  0, 0, 0],

			[0, 0, 0, 0, 0,  0, 0, 0, 0, 0,  0, 0, 0, 0, 0,  0, 0, 0, 0, 0,  0, 0, 0, 0, 0,  0, 0, 0],
			[0, 0, 0, 0, 0,  0, 0, 0, 0, 0,  0, 0, 1, 0, 0,  1, 0, 0, 0, 0,  0, 0, 0, 0, 0,  0, 0, 0],
			[0, 0, 0, 0, 0,  0, 0, 0, 0, 0,  0, 0, 0, 0, 0,  0, 0, 0, 0, 0,  0, 0, 0, 0, 0,  0, 0, 0],
			[0, 0, 0, 0, 0,  0, 0, 0, 0, 0,  0, 0, 0, 0, 0,  0, 0, 0, 0, 0,  0, 0, 0, 0, 0,  0, 0, 0],
			[0, 0, 0, 0, 0,  0, 1, 0, 0, 1,  0, 0, 0, 0, 0,  0, 0, 0, 1, 0,  0, 1, 0, 0, 0,  0, 0, 0],

			[0, 0, 0, 0, 0,  0, 0, 0, 0, 0,  0, 0, 0, 0, 0,  0, 0, 0, 0, 0,  0, 0, 0, 0, 0,  0, 0, 0],
			[0, 0, 0, 0, 0,  0, 0, 0, 0, 0,  0, 0, 0, 0, 0,  0, 0, 0, 0, 0,  0, 0, 0, 0, 0,  0, 0, 0],
			[0, 0, 0, 0, 0,  0, 0, 0, 0, 0,  0, 0, 0, 0, 0,  0, 0, 0, 0, 0,  0, 0, 0, 0, 0,  0, 0, 0],
			[0, 0, 0, 0, 0,  0, 0, 0, 0, 0,  0, 0, 0, 0, 0,  0, 0, 0, 0, 0,  0, 0, 0, 0, 0,  0, 0, 0],
			[0, 0, 0, 0, 0,  0, 0, 0, 0, 0,  0, 0, 0, 0, 0,  0, 0, 0, 0, 0,  0, 0, 0, 0, 0,  0, 0, 0],

			[0, 0, 0, 0, 0,  0, 0, 0, 0, 0,  0, 0, 0, 0, 0,  0, 0, 0, 0, 0,  0, 0, 0, 0, 0,  0, 0, 0],
			[0, 0, 0, 0, 0,  0, 0, 0, 0, 0,  0, 0, 0, 0, 0,  0, 0, 0, 0, 0,  0, 0, 0, 0, 0,  0, 0, 0],
			[0, 0, 0, 0, 0,  0, 0, 0, 0, 0,  0, 0, 0, 0, 0,  0, 0, 0, 0, 0,  0, 0, 0, 0, 0,  0, 0, 0],
			[0, 0, 0, 0, 0,  0, 0, 0, 0, 0,  0, 0, 0, 0, 0,  0, 0, 0, 0, 0,  0, 0, 0, 0, 0,  0, 0, 0],
			[0, 0, 0, 0, 0,  0, 0, 0, 0, 0,  0, 0, 0, 0, 0,  0, 0, 0, 0, 0,  0, 0, 0, 0, 0,  0, 0, 0],

			[0, 0, 0, 0, 0,  0, 0, 0, 0, 0,  0, 0, 0, 0, 0,  0, 0, 0, 0, 0,  0, 0, 0, 0, 0,  0, 0, 0],
			[0, 0, 0, 0, 0,  0, 0, 0, 0, 0,  0, 0, 0, 0, 0,  0, 0, 0, 0, 0,  0, 0, 0, 0, 0,  0, 0, 0],
			[0, 0, 0, 0, 0,  0, 0, 0, 0, 0,  0, 0, 0, 0, 0,  0, 0, 0, 0, 0,  0, 0, 0, 0, 0,  0, 0, 0],
			[0, 0, 0, 0, 0,  0, 0, 0, 0, 0,  0, 0, 0, 0, 0,  0, 0, 0, 0, 0,  0, 0, 0, 0, 0,  0, 0, 0],
			[0, 1, 0, 0, 0,  0, 0, 0, 0, 0,  0, 0, 0, 0, 0,  0, 0, 0, 0, 0,  0, 0, 0, 0, 0,  0, 1, 0],

			[0, 0, 0, 0, 0,  0, 0, 0, 0, 0,  0, 0, 0, 0, 0,  0, 0, 0, 0, 0,  0, 0, 0, 0, 0,  0, 0, 0],	
		]
	]

	//console.log(raw)
	return raw
}